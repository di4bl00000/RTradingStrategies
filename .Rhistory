source('/Volumes/data/RProjects/RTradingStrategies/quantstrat-parameters.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/quantstrat-parameters.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/quantstrat-parameters.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
tradeStats(portfolio.name)
tradeStats
edit(tradeStats)
tradeStats(portfolio.name)install.packages("blotter", repos= c("http://R-Forge.R-project.org", getOption("repos")))
install.packages("blotter", repos= c("http://R-Forge.R-project.org", getOption("repos")))
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/quant-debug.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/quant-debug.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
posPL$Net.Trading.PL
source('/Volumes/data/RProjects/RTradingStrategies/quant-debug.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
qqqq
cumsum(qqqq)
head(qqqq)
source('/Volumes/data/RProjects/RTradingStrategies/quant-debug.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
head(IF1208)
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
testPackList
str(testPackList)
names(testPackList)
testPackList$eachRun
names(testPackList$eachRun)
testPackList$eachRun[[1]]
names(testPackList$eachRun[[1]])
testPackList$eachRun[[1]]$out
source('~/workspace/RTradingStrategies/dma_adx.R')
updatePortf
blotter::.getBySymbol
blotter:::.getBySymbol
timeBased(Sys.time())
is.timeBased(Sys.Date())
is/timeBased(Sys.time())
is.timeBased(Sys.time())
timeBased(200701)
is.timeBased
xts:::.parseISO8601
data(sample_matrix)
sample.xts <- as.xts(sample_matrix, descr='my new xts object')
class(sample.xts)
str(sample.xts)
head(sample.xts)
times(sample.xts)
time(sample.xts)
.parseISO8601(time(sample.xts))
.parseISO8601
.parseISO8601('2000')
.parseISO8601('2000/2001')
.parseISO8601('2000-05/2001')
.parseISO8601('2000-05/2001-02')
.parseISO8601('2000-01/02')
.parseISO8601('T08:30/T15:00')
.parseISO8601
getInstrument
.parseISO8601(time(sample.xts))
sample.xts["/NA"]
.parseISO8601
sample.xts
sample.xts["2007"]
sample.xts["2008"]
nrow(sample.xts["2008"])
sample.xts["2007-06"]
sample.xts["2007-06-30"]
sample.xts["2007-06-30T12:00:00"]
x.date <- as.Date(paste(2003, 2, c(1, 3, 7, 9, 14), sep = "-"))
x <- zoo(rnorm(5), x.date)
x
index(x)
.parseISO8601(index(x))
x["/"]
x[""]
x["/2001"]
x["/2006"]
x
sample.xts["/"]
sample.xts["/NA"]
sample.xts["NA/"]
sample.xts["/"]
paste('/',NA,sep='')
source('~/workspace/RTradingStrategies/dma_adx.R')
getEndEq
initAccout
initAccou
initAcct
.initSummary
blotter::: .initSummary
dailyTxnPL
apply.daily
apply.weekly
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
tradeStats
source('~/workspace/RTradingStrategies/dma_adx.R')
testPackList
str(testPackList)
testPackList$eachRun
str(testPackList$eachRun)
names(testPackList)
names(testPackList$statsTable)
testPackList$statsTable
-45968.48+30897.67
applyStrategy
updatePortf
.updatePosPL
IF1208
IF1204
IF1204["/"]
source('~/workspace/RTradingStrategies/dma_adx.R')
testPackList$statsTable
.updatePosPL
paste('/', NULL, sep='')
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/myMA.R')
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
source('~/workspace/RTradingStrategies/myMA.R')
getPrice
has.Price
(x <- xts(4:10, Sys.Date()+4:10))
(y <- xts(1:6, Sys.Date()+1:6))
merge(x,y)
az <- zoo(1:6)
az
bz <- zoo(c(2,NA,1,4,5,2))
bz
na.locf(bz)
na.locf(bz, fromLast = TRUE)
cz <- zoo(c(NA,9,3,2,3,2))
cz
na.locf(cz)
z <- zoo(c(0.007306621, 0.007659046, 0.007681013,
0.007817548, 0.007847579, 0.007867313),
as.Date(c("1993-01-01", "1993-01-09", "1993-01-16",
"1993-01-23", "1993-01-30", "1993-02-06")))
z
start(z)
end(z)
g <- seq(start(z), end(z), "day")
g
na.locf(z, xout = g)
z <- zoo(1:9, as.POSIXct(c("2010-01-04 09:30:02", "2010-01-04 09:30:06",
"2010-01-04 09:30:07", "2010-01-04 09:30:08", "2010-01-04 09:30:09",
"2010-01-04 09:30:10", "2010-01-04 09:30:11", "2010-01-04 09:30:13",
"2010-01-04 09:30:14")))
z
g <- seq(start(z), end(z), by = "2 sec")
g
na.locf(z, xout = g)
z <- zoo(c(1311.56, 1309.04, 1295.5, 1296.6, 1286.57, 1288.12,
1289.12, 1289.12, 1285.33, 1307.65, 1309.93, 1311.46, 1311.28,
1308.11, 1301.74, 1305.41, 1309.72, 1310.61, 1305.19, 1313.21,
1307.85, 1312.25, 1325.76), as.Date(c(13242, 13244,
13245, 13248, 13249, 13250, 13251, 13252, 13255, 13256, 13257,
13258, 13259, 13262, 13263, 13264, 13265, 13266, 13269, 13270,
13271, 13272, 13274)))
z
time(z)
rng <- range(time(z))
rng
zoo(, seq(rng[1], rng[2], by = "day"))
z
z.na <- merge(z, zoo(, seq(rng[1], rng[2], by = "day")))
z.na
na.locf(z.na)
as.POSIXlt(time(z.na))$mday == 5
time(z.na)
as.POSIXlt(time(z.na))
as.POSIXlt(time(z.na))$mday
na.locf(z.na)[as.POSIXlt(time(z.na))$mday == 5]
idx <- coredata(na.locf(seq_along(z.na) + (0 * z.na)))
idx
z.na[idx[as.POSIXlt(time(z.na))$mday == 5]]
merge(z.na, filled1 = na.locf(z.na, maxgap = 1))
filled1 = na.locf(z.na, maxgap = 1)
filled1
merge(z.na, filled1 = na.locf(z.na, maxgap = 1))
m <- zoo(cbind(c(1, 2, NA, NA, 5, NA, NA), seq(7)^2), as.Date(1:7))
m
r <- na.locf(m[,1]) * m[,2] / na.locf(m[,2] + (m[,1]-m[,1]))
r
cbind(V1 = r, V2 = m[,2])
zq <- zoo(c(1, NA, 3, 4), as.yearqtr(2000) + 0:3/4)
zq
tt <- as.yearmon(start(zq)) + seq(0, len = 3 * length(zq))/12
tt
na.locf(zq, xout = tt, maxgap = 0)
source('~/workspace/RTradingStrategies/dma_adx.R')
tradeStats
install.packages("FinancialInstrument", repos="http://R-Forge.R-project.org")
install.packages(c("RcppExamples", "timeSeries"))
getSymbols("IF1101", src="MySQL", user="test", password="123456", dbname="historydata", db.fields=c("date", "open", "high", "low", "close", "bid", "ask", "volume", "adjusted"), field.names=c("open", "high", "low", "close", "bid", "ask", "volume", "adjusted"))
head(IF1101)
source('~/workspace/RTradingStrategies/saveData.R')
head(IF1101)
getSymbols("IF1101", src="MySQL", user="test", password="123456", dbname="historydata", db.fields=c("date", "open", "high", "low", "close", "bid", "ask", "volume", "adjusted"), field.names=c("open", "high", "low", "close", "bid", "ask", "volume", "adjusted"))
head(IF1101)
head(IF1101,n=120)
source('~/workspace/RTradingStrategies/saveData.R')
save(IF1101, file="IF1101.rda"))
save(IF1101, file="IF1101.rda")
save(IF1102, file="IF1102.rda")
save(IF1103, file="IF1103.rda")
save(IF1011, file="IF1011.rda")
save(IF1012, file="IF1012.rda")
ndays(IF1012)
ndays(IF1011)
ndays(IF1101)
ndays(IF1102)
ndays(IF1103)
days
load("~/workspace/RTradingStrategies/IF1012.rda")
IF1012
library("xts")
IF1012
library("quantstrat")
library("qmao")
chart.Posn(IF1011)
chart.Posn(IF1012)
chartSeries(IF1012)
head(IF1012)
head(IF1012, type="bar")
chartSeries(IF1012,type="bar")
chartSeries(IF1012,type="line")
chartSeries
getSymbols("IF1201", src="RData")
IF1201
head(IF1201)
showSymbols()
source('~/workspace/RTradingStrategies/dma_adx.R')
load("~/workspace/RTradingStrategies/F.rda")
head(F)
getSymbols("F", src="RData", dir=current.dir,  col.names=c("Open",High","Low","Close","Volume","Adjusted"))
getSymbols("F", src="RData", dir=current.dir,  col.names=c("Open","High","Low","Close","Volume","Adjusted"))
F
head(F)
load("~/workspace/RTradingStrategies/F.rda")
head(F)
chartSeries(F)
tail(F)
tail(F)
source('~/workspace/RTradingStrategies/kalman.prediction.R')
F
head(F)
source('~/workspace/RTradingStrategies/kalman.R')
install.packages("sspir")
source('~/workspace/RTradingStrategies/kalman.R')
install.packages("FKF")
install.packages("dlm")
source('~/workspace/RTradingStrategies/kalman.R')
install.packages("dse")
library("dse")
rain  <- matrix(rnorm(86*17), 86,17)
radar <- matrix(rnorm(86*5),  86,5)
mydata <- TSdata(input=radar, output=rain)
mydata
st.m <- c(3, 1, 0, -3, 0, 1, 1, 0, 0)
st.m
as.matrix(st.m, nrow=3)
as.matrix(st.m, nrow=3, ncol=3)
as.matrix(st.m, nrow=3, ncol=3, byrow=T)
mdat <- matrix(st.m, nrow = 3, ncol=3, byrow=TRUE)
mdat
mdat <- matrix(st.m, nrow = 3, ncol=3, byrow=F)
mdat
mdat <- matrix(st.m, nrow = 3, ncol=3, bycol=T)
mdat <- matrix(st.m, nrow = 3, ncol=3, byrow=T)
mdat
mdat <- matrix(st.m, nrow = 3, ncol=3)
mdat
source('~/workspace/RTradingStrategies/kalman.prediction.R')
model
structSSM
source('~/workspace/RTradingStrategies/kalman.R')
m1b.dse.est
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
m1.sspir.f
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
m1.dlm <- dlm(FF=1, V=0.8, GG=1, W=0.1, m0=0, C0=100)
m1.dlm
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
y<-Nile
modelNile<-structSSM(y=y)
modelNile
set.seed(21)
web02ts <- xts(rnorm(10), Sys.time()+1:10+runif(10)/3)
web02ts
web02ts_reg <- align.time(web02ts,1)
web02ts_reg
frequency(web02ts_reg)
as.ts(web02ts_reg)
F
getSymbols("F", src="RData")
F
as.ts(F)
source('~/workspace/RTradingStrategies/kalman.prediction.R')
model
F[, "Close"]
getPrice
getPrice(F)
source('~/workspace/RTradingStrategies/kalman.prediction.R')
model
source('~/workspace/RTradingStrategies/kalman.prediction.R')
source('~/workspace/RTradingStrategies/kalman.prediction.R')
source('~/workspace/RTradingStrategies/kalman.prediction.R')
source('~/workspace/RTradingStrategies/kalman.prediction.R')
ups
lows
source('~/workspace/RTradingStrategies/kalman.prediction.R')
library(KFAS)
# Example of local level model for Nile series
y<-Nile
modelNile<-structSSM(y=y)
fit<-fitSSM(inits=c(0.5*log(var(Nile)),0.5*log(var(Nile))),model=modelNile)
# Filtering and state smoothing
kfsNile<-KFS(fit$model,smoothing="state")
# Simple plot of series and the smoothed signal = Z*alphahat
plot(kfsNile,col=1:2)
# Confidence intervals for the state
lows<-c(kfsNile$alphahat-qnorm(0.95)*sqrt(c(kfsNile$V)))
ups<-c(kfsNile$alphahat+qnorm(0.95)*sqrt(c(kfsNile$V)))
plot.ts(cbind(y,c(kfsNile$alphahat),lows,ups), plot.type="single", col=c(1:2,3,3),
ylab="Predicted Annual flow", main="River Nile")
F.model
matrix(130, 1, 1)
data("eg1.DSE.data.diff", package="dse")
model <- toSS(TSmodel(estVARXls(eg1.DSE.data.diff)))
lmodel <- l(model,eg1.DSE.data.diff)
summary(lmodel)
tfplot(lmodel)
lmodel <- l(model,eg1.DSE.data.diff, return.state=TRUE)
tfplot(state(lmodel, filter=TRUE))
data("eg1.DSE.data.diff", package="dse")
model <- toSS(TSmodel(estVARXls(eg1.DSE.data.diff)))
lmodel <- l(model,eg1.DSE.data.diff)
summary(lmodel)
tfplot(lmodel)
lmodel <- l(model,eg1.DSE.data.diff, return.state=TRUE)
tfplot(state(lmodel, filter=TRUE))
data("eg1.DSE.data.diff", package="dse")
model <- toSS(TSmodel(estVARXls(eg1.DSE.data.diff)))
lmodel <- l(model,eg1.DSE.data.diff)
summary(lmodel)
tfplot(lmodel)
lmodel <- l(model,eg1.DSE.data.diff, return.state=TRUE)
tfplot(state(lmodel, filter=TRUE))
data("eg1.DSE.data.diff", package="dse")
model <- toSS(TSmodel(estVARXls(eg1.DSE.data.diff)))
lmodel <- l(model,eg1.DSE.data.diff)
summary(lmodel)
tfplot(lmodel)
lmodel <- l(model,eg1.DSE.data.diff, return.state=TRUE)
tfplot(state(lmodel, filter=TRUE))
Fkfilter
fkfilter
kfilter
data(kurit)
kurit
m1 <- SS(kurit)
SS
m1 <- SS(kurit)
fix(F.model)
data(kurit)  ## West & Harrison, page 40
m1 <- SS(y=kurit,
Fmat=function(tt,x,phi) return(matrix(1)),
Gmat=function(tt,x,phi) return(matrix(1)),
Wmat=function(tt,x,phi) return(matrix(5)), ## Alternatively Wmat=matrix(5)
Vmat=function(tt,x,phi) return(matrix(100)), ## Alternatively Vmat=matrix(100)
m0=matrix(130),C0=matrix(400)
)
data(kurit)
SS
demo()
demo(gas)
demo(kurit)
demo(mumps)
demo(mumps)
demo(mumps)
demo(vandrivers)
demo(vandrivers)
data(vandrivers)
vandrivers$y <- ts(vandrivers$y,start=1969,frequency=12)
vd.time <- time(vandrivers$y)
vd <- ssm( y ~ tvar(1) + seatbelt + sumseason(vd.time,12),
family=poisson(link="log"),
data=vandrivers,
phi = c(1,0.0004),
C0=diag(13)*100,
fit=FALSE
)
phi(vd)["(Intercept)"] <- exp(- 2*3.703307 )
C0(vd) <- diag(13)*1000
vd.res <- kfs(vd)
plot( vd.res$m[,1:3] )
attach(vandrivers)
plot(y,ylim=c(0,20))
detach(vandrivers)
data(vandrivers)
vandrivers$y <- ts(vandrivers$y,start=1969,frequency=12)
vd.time <- time(vandrivers$y)
vd <- ssm( y ~ tvar(1) + seatbelt + sumseason(vd.time,12),
family=poisson(link="log"),
data=vandrivers,
phi = c(1,0.0004),
C0=diag(13)*100,
fit=FALSE
)
phi(vd)["(Intercept)"] <- exp(- 2*3.703307 )
C0(vd) <- diag(13)*1000
vd.res <- kfs(vd)
plot( vd.res$m[,1:3] )
attach(vandrivers)
plot(y,ylim=c(0,20))
lines(exp(vd.res$m[,1]+vd.res$m[,2]*seatbelt),lwd=2 )
detach(vandrivers)
nileBuild <- function(par) {
dlmModPoly(1, dV = exp(par[1]), dW = exp(par[2]))
}
nileMLE <- dlmMLE(Nile, rep(0,2), nileBuild); nileMLE$conv
nileMod <- nileBuild(nileMLE$par)
V(nileMod)
W(nileMod)
nileFilt <- dlmFilter(Nile, nileMod)
nileSmooth <- dlmSmooth(nileFilt)
plot(cbind(Nile, nileFilt$m[-1], nileSmooth$s[-1]), plot.type='s',
col=c("black","red","blue"), ylab="Level", main="Nile river", lwd=c(1,2,2))
x <- matrix(rnorm(10),nc=2)
mod <- dlmModReg(x)
is.dlm(mod)
## Adding dlm's
dlmModPoly() + dlmModSeas(4) # linear trend plus quarterly seasonal component
require(stats)
dim(diag(3))
diag(10,3,4)
diag(10)
diag(3)
class(diag(3))
y <- Nile
y[c(3, 10)] <- NA  # NA values can be handled
## Set constant parameters:
dt <- ct <- matrix(0)
Zt <- Tt <- matrix(1)
a0 <- y[1]            # Estimation of the first year flow
P0 <- matrix(100)     # Variance of 'a0'
## Estimate parameters:
fit.fkf <- optim(c(HHt = var(y, na.rm = TRUE) * .5,
GGt = var(y, na.rm = TRUE) * .5),
fn = function(par, ...)
-fkf(HHt = matrix(par[1]), GGt = matrix(par[2]), ...)$logLik,
yt = rbind(y), a0 = a0, P0 = P0, dt = dt, ct = ct,
Zt = Zt, Tt = Tt, check.input = FALSE)
## Filter Nile data with estimated parameters:
fkf.obj <- fkf(a0, P0, dt, ct, Tt, Zt, HHt = matrix(fit.fkf$par[1]),
GGt = matrix(fit.fkf$par[2]), yt = rbind(y))
## Compare with the stats' structural time series implementation:
fit.stats <- StructTS(y, type = "level")
fit.fkf$par
fit.stats$coef
## Plot the flow data together with fitted local levels:
plot(y, main = "Nile flow")
lines(fitted(fit.stats), col = "green")
lines(ts(fkf.obj$att[1, ], start = start(y), frequency = frequency(y)), col = "blue")
legend("top", c("Nile flow data", "Local level (StructTS)", "Local level (fkf)"),
col = c("black", "green", "blue"), lty = 1)
source('~/workspace/RTradingStrategies/kalman.R')
dlm
edit ()
edit(dlm)
tst <- function(a, b = 3, ...) {nargs()}
tst() # 0
tst(clicketyclack) # 1 (even non-existing)
tst(c1, a2, rr3) # 3
foo <- function(x, y, z, w) {
cat("call was", deparse(match.call()), "\n")
nargs()
}
foo()    # 0
foo(,,3) # 3
foo(z=3) # 1, even though this is the same call
source('~/workspace/RTradingStrategies/kalman.R')
matrix(c(1,0,0), byrow=T)
matrix(c(1,0,0), byrow=F)
matrix(c(1,0,0), nrow=1,byrow=T)
