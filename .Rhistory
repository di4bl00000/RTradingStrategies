plot(tsSmooth(fit))
install.packages("signal")
library("signal")
butter
bf <- butter(5,1/3)
bf
x <- c(rep(0,15), rep(10, 10), rep(0, 15))
x
sg <- sgolayfilt(x)
plot(sg, type="l")
lines(filtfilt(rep(1, 5)/5,1,x), col = "red")
lines(filtfilt(bf,x), col = "blue")
points(x, pch = "x")
source('/Volumes/other/RProjects/RTradingStrategies/stra1.R')
install.packages("quantstrat", repos= c("http://R-Forge.R-project.org", getOption("repos")))
install.packages("quantmod", repos= c("http://R-Forge.R-project.org", getOption("repos")))
getSymbols.MySQL
library("quantmod")
library("quantstrat")
library("qmao")
getSymbols.cfe
library("qmao")
library("quantstrat")
getSymbol("FORD")
getSymbols("FORD")
chartSeries(FORD)
chartSeries(FORD[,"open"])
head(FORD)
chartSeries(FORD[,"Open"])
chartSeries(FORD[,"Open"])
FORD[,"Open"]
head(FORD)
FORD[,"FORD.Open"]
chartSeries(FORD[,"FORD.Open"])
getSymbol("F")
getSymbols("F")
chartSeries(F[,"F.Open"])
getSymbols
getSymbols("F", from="2008-07-31", to="2009-07-30")
head(F)
tail(F)
save(F, file="F.rda")
setwd("/Volumes/other/RProjects/RTradingStrategies")
save(F, file="F.rda")
load("/Volumes/other/RProjects/RTradingStrategies/IF1208.rda")
source('/Volumes/other/RProjects/RTradingStrategies/stra1.R')
tradeStats(portfolio.name)
source('/Volumes/other/RProjects/RTradingStrategies/stra1.R')
source('~/.active-rstudio-document')
source('/Volumes/other/RProjects/RTradingStrategies/quantstrat-myrule.R')
source('/Volumes/other/RProjects/RTradingStrategies/stra1.R')
source('/Volumes/other/RProjects/RTradingStrategies/quantstrat-myrule.R')
source('/Volumes/other/RProjects/RTradingStrategies/stra1.R')
source('/Volumes/other/RProjects/RTradingStrategies/quantstrat-myrule.R')
source('/Volumes/other/RProjects/RTradingStrategies/stra1.R')
source('/Volumes/other/RProjects/RTradingStrategies/quantstrat-myrule.R')
source('/Volumes/other/RProjects/RTradingStrategies/stra1.R')
tradeStats(portfolio.name)
dailyStats(portfolio.name)
tradeStats(portfolio.name)
source('/Volumes/other/RProjects/RTradingStrategies/stra1.R')
tradeStats(portfolio.name)
library("FinancialInstrument")
## Not run:
# Construct instruments for several different asset classes
# Define a currency and some stocks
require("FinancialInstrument")
currency(c("USD", "EUR")) # define some currencies
stock(c("SPY", "LQD", "IBM", "GS"), currency="USD") # define some stocks
exchange_rate("EURUSD") # define an exchange rate
ls_stocks() #get the names of all the stocks
ls_instruments() # all instruments
getInstrument("IBM")
update_instruments.yahoo(ls_stocks())
update_instruments.TTR(ls_stocks()) # doesn't update ETFs
update_instruments.masterDATA(ls_stocks()) # only updates ETFs
getInstrument("SPY")
## Compare instruments with all.equal.instrument method
all.equal(getInstrument("USD"), getInstrument("USD"))
all.equal(getInstrument("USD"), getInstrument("EUR"))
all.equal(getInstrument("SPY"), getInstrument("LQD"))
## Search for the tickers of instruments that contain words
find.instrument("computer") #IBM
find.instrument("bond")  #LQD
## Find only the ETFs; update_instruments.masterDATA added a "Fund.Type" field
## to the ETFs, but not to the stocks
ls_instruments_by("Fund.Type") # all instruments that have a "Fund.Type" field
# build data.frames with instrument attributes
buildHierarchy(ls_stocks(), "Name", "type", "avg.volume")
## before defining a derivative, must define the root (can define the underlying
## in the same step)
future("ES", "USD", multiplier=50, tick_size=0.25,
underlying_id=synthetic("SPX", "USD", src=list(src='yahoo', name='^GSPC')))
# above, in addition to defining the future root "ES", we defined an instrument
# named "SPX".  Using the "src" argument causes setSymbolLookup to be called.
# Using the "src" arg as above is the same as
# setSymbolLookup(SPX=list(src='yahoo', name='^GSPC'))
getSymbols("SPX") # this now works even though the Symbol used by
# getSymbols.yahoo is "^GSPC", not "SPX"
## Back to the futures; we can define a future_series
future_series("ES_U2", identifiers=list(other="ESU2"))
# identifiers are not necessary, but they allow for the instrument to be found
# by more than one name
getInstrument("ESU2") #this will find the instrument even though the primary_id
#is "ES_U2"
# can also add indentifiers later
add.identifier("ES_U2", inhouse="ES_U12")
# can add an arbitrary field with instrument_attr
instrument_attr("ES_U2", "description", "S&P 500 e-mini")
getInstrument("ES_U2")
option_series.yahoo("GS") # define a bunch of options on "GS"
# option root was automatically created
getInstrument(".GS")
# could also find ".GS" by looking for "GS", but specifiying type
getInstrument("GS", type='option')
# if you do not know what type of instrument you need to define, try
instrument.auto("ESM3")
getInstrument("ESM3")
instrument.auto("USDJPY")
getInstrument("USDJPY")
instrument.auto("QQQ") #doesn't work as well on ambigous tickers
getInstrument("QQQ")
# Some functions that make it easier to work with futures
M2C() # Month To Code
M2C()[5]
M2C("may")
C2M() # Code To Month
C2M("J")
C2M()[7]
MC2N("G") # Month Code to Numeric
MC2N("H,K,M")
parse_id("ES_U3")
parse_id("EURUSD")
next.future_id("ES_U2")
next.future_id("ZC_H2", "H,K,N,U,Z")
prev.future_id("CL_H2", 1:12)
sort_ids(ls_instruments()) # sort by expiration date, then alphabetically for
# things that don't expire.
format_id("ES_U2", "CYY")
format_id("ES_U2", "CYY", sep="")
format_id("ES_U2", "MMMYY")
## Saving the instrument environment to disk
tmpdir <- tempdir()
saveInstruments("MyInstruments.RData", dir=tmpdir)
rm_instruments(keep.currencies=FALSE)
ls_instruments() #NULL
loadInstruments("MyInstruments.RData", dir=tmpdir)
ls_instruments()
unlink(tmpdir, recursive=TRUE)
#build a spread:
fn_SpreadBuilder(getSymbols(c("IBM", "SPY"), src='yahoo'))
head(IBM.SPY)
getInstrument("IBM.SPY")
# alternatively, define a spread, then build it
spread(members=c("IBM", "GS", "SPY"), memberratio=c(1, -2, 1))
buildSpread("IBM.GS.SPY") #Since we hadn't yet downloaded "GS", buildSpread
#downloaded it temporarily
chartSeries(IBM.GS.SPY)
## fn_SpreadBuilder will return as many columns as it can
## (Bid, Ask, Mid, or Op, Cl, Ad), but only works on 2 instrument spreads
## buildSpread works with any number of legs, but returns a single price column
getFX("EUR/USD", from=Sys.Date()-499) # download exchange rate from Oanda
IBM.EUR <- redenominate("IBM", "EUR") #price IBM in EUR instead of dollars
chartSeries(IBM, subset='last 500 days', TA=NULL)
addTA(Ad(IBM.EUR), on=1, col='red')
## End(Not run)
currency
stock
currency
detach("package:FinancialInstrument")
install.packages("FinancialInstrument", repos= c("http://R-Forge.R-project.org", getOption("repos")))
install.packages("FinancialInstrument", repos= c("http://R-Forge.R-project.org", getOption("repos")))
print(book)
install.packages("FinancialInstrument", repos= c("http://R-Forge.R-project.org", getOption("repos")))
instrument
currency
instrument
currency("USD")
USD
a<-currency("USD")
a
get(USD)
ls_currencies()
options(width=80)
options(width=240)
load("/Volumes/data/RProjects/RTradingStrategies/IF1208.rda")
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
paramConstraint
quantstrat::paramConstraint
quantstrat:::paramConstraint
applyParameter
xts
assignInNamespace("applyParameter", applyParameter, ns="quantstrat")
applyParameter
source('/Volumes/data/RProjects/RTradingStrategies/quantstrat-myrule.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
paramConstraint
source('/Volumes/data/RProjects/RTradingStrategies/quantstrat-myrule.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
.getSymbols
quantmod::.getSymbols
quantmod:::.getSymbols
quantmod::.getSymbols
quantmod:::.getSymbols
install.packages("quantmod", repos="http://R-Forge.R-project.org")
ls()
ls(envir="quantmod")
install.packages(c("KernSmooth", "MASS", "boot", "class", "mgcv", "nnet", "rpart", "spatial"))
ls(envir="base")
FinancialInstrument:::.instrument
.blotter
ls()
showSymbols()
getSymbols("MSFT")
showSymbols()
saveSymbols("IF1208")
showSymbols()
IF1208
saveSymbols
saveSymbols
getSymbols("MSFT")
getSymbols("MSFT")
getSymbols("MSFT")
showSymbols()
showSymbols("IBM")
getSymbols("IBM")
showSymbols("IBM")
showSymbols()
getSymbols
loadSymbols
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
load("/Volumes/data/RProjects/RTradingStrategies/IF1208.rda")
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
getSymbols("MSFT")
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
applyStrat
applyStrategy
initStrategy
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
applyStrategy
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
updateStrat
updateStrategy
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
updateStrategy
add.init
add.wrap
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
load("/Volumes/data/RProjects/RTradingStrategies/IF1208.rda")
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
add.init
getStrategy("dma_adx")
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
getStrategy("dma_adx")
ls(.strategy)
getStrategy
dma_adx
"dma_adx"
getStrategy(strategy.name)
rm.strat("dma_adx")
rm.strat("dma_adx")
updateStrategy
lsfun('quantstrat')
is.strategy(strat)
ls(.strategy)
ls(pos=.strategy)
ls(envir=.strategy)
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
getSymbols
loadSymbols
getSymbols.rda
getSymbols("IF1208", dir=current.dir)
getSymbols("IF1208", src="RData", dir=current.dir)
showSymbols()
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
getSymbols("IF1208", src="RData", dir=current.dir)
head(IF1208)
head(MSFT)
As()
As
load("/Volumes/data/RProjects/RTradingStrategies/IF1208.rda")
head(IF1208)
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
source('/Volumes/data/RProjects/RTradingStrategies/dma_adx.R')
getSymbols.csv
source('~/workspace/RTradingStrategies/dma_adx.R')
install.packages(c("FinancialInstrument", "quantmod", "blotter", "quantstrat", "qmao"), repos= c("http://R-Forge.R-project.org", getOption("repos")))
install.packages(c("RcppClassic", "stringr"))
unzip("/home/alex/Downloads/data/1-300000.zip")
a<-unzip("/home/alex/Downloads/data/1-300000.zip")
a
read.table("./TRD_Dalyr.csv")
read.table("./TRD_Dalyr.csv", fileEncoding = "UCS-2LE")
a
grep(".csv$", a)
grep("\.csv$", a)
grep("\\.csv$", a)
grep("\\.csv$", a, value=T)
grep(".csv$", a, value=T)
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
data.dir <- "~/Downloads/data"
files <- list.files(data.dir, full.names=T)
files
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
data.dir <- "~/Downloads/data"
files <- list.files(data.dir, full.names=T)
files
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
dim(files)
dims(files)
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
source('~/workspace/RTradingStrategies/handlestock.R')
save(raw.all, file="raw.all.rda")
read.table("cu0001.csv", header = T, sep = "\t")
dd<-read.table("cu0001.csv", header = T, sep = "\t")
head(dd)
str(dd)
dd<-read.table("cu0001.csv", header = T, sep = "\t",colClasses=c("Date","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
dd<-read.table("cu0001.csv", header = T, sep = "\t",colClasses=c("Date","numeric","numeric","numeric","numeric","numeric","numeric"))
str(dd)
dd
dd<-read.table("cu0001.csv", header = T, sep = "\t",colClasses=c("Date","numeric","numeric","numeric","numeric","numeric","double"))
str(dd)
dd<-read.table("cu0001.csv", header = T, sep = "\t",colClasses=c("Date","numeric","numeric","numeric","numeric","numeric","numeric"))
dd<-read.table("cu0001.csv", header = T, sep = "\t",colClasses=c("Date","numeric","numeric","numeric","numeric","numeric","numeric"))
cu0001 <- dd
View(cu0001)
library("xts")
xts(cu0001)
as.xts(cu0001)
as.xts(cu0001, dateFormat="Date" )
as.xts(cu0001, dateFormat="Date")
class(cu0001)
matrix(cu0001)
as.matrix(cu0001)
as.xts(as.matrix(cu0001))
cu0001
cu0001[,-1]
as.xts(cu0001[,-1],order.by=cu0001[,1])
cu0001<-as.xts(cu0001[,-1],order.by=cu0001[,1])
fix(cu0001)
nrow(cu0001)
head(cu0001)
tail(cu0001)
cu0001<-cu0001[1:5]
head(cu0001)
tail(cu0001)
dd<-read.table("cu0001.csv", header = T, sep = "\t",colClasses=c("Date","numeric","numeric","numeric","numeric","numeric","numeric"))
cu0001 <- dd
cu0001<-as.xts(cu0001[,-1],order.by=cu0001[,1])
cu0001[,1:5]
cu0001<-cu0001[,1:5]
head(cu0001)
tail(cu0001)
save(cu0001, file="cu0001.rda")
source('~/workspace/RTradingStrategies/quantstrat-myrule.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
getSymbols("IF1011", src="MySQL")
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
library("RMySQL")
library("DBI")
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
m <- dbDriver("MySql")
m <- dbDriver("MySQL")
str(m)
print(m)
con<-dbConnect(m)
print(con)
con<-dbConnect(m,user="test")
con<-dbConnect(m,user="test",password="12345")
con<-dbConnect(m,user="test",password="123456")
con<-dbConnect(m,user="test",password="123456", dbname="historydata")
con<-dbConnect(m,user="test",password="123456", dbname="historydata",host="192.168.10.148")
con<-dbConnect(m,user="test",password="123456", dbname="historydata",host="192.168.10.149")
con<-dbConnect(m,user="test",password="123456", dbname="historydata",host="192.168.10.149")
con<-dbConnect(m,user="test",password="123456", dbname="historydata")
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
getSymbols.MySQL
MySQL()
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
getSymbols.MySQL
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata")
getSymbols("IF1011", src="MySQL", user="test", password="123456", dbname="historydata", db.fields = c("Open", "High", "Low", "Close", "Volume", "Adjusted"))
IF1011
fix(IF1011)
getSymbols("IF1203", src="MySQL", user="test", password="123456", dbname="historydata", db.fields=c("Open", "High", "Low", "Close", "Volume", "Adjusted"))
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
head(IF1203)
getSymbols("IF1203", src="MySQL", user="test", password="123456", dbname="historydata", field.names=c("Open", "High", "Low", "Close", "Volume", "Adjusted"))
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
getSymbols("IF1203", src="MySQL", user="test", password="123456", dbname="historydata", field.names=c("Open", "High", "Low", "Close", "Volume", "Adjusted"))
getSymbols("IF1203", src="MySQL", user="test", password="123456", dbname="historydata", db.fields=c("Open", "High", "Low", "Close", "Volume", "Adjusted"))
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
getSymbols("IF1203", src="MySQL", user="test", password="123456", dbname="historydata", db.fields=c("Open", "High", "Low", "Close", "Volume", "Adjusted"))
getSymbols("IF1203", src="MySQL", user="test", password="123456", dbname="historydata", db.fields=c("date", "open", "high", "low", "close", "volume", "adjusted"))
head(IF1203)
getSymbols("IF1203", src="MySQL", user="test", password="123456", dbname="historydata", db.fields=c("date", "open", "high", "low", "close", "volume", "adjusted"), field.names=c("open", "high", "low", "close", "volume", "adjusted"))
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
head(IF1203)
ts<-IF1203
ts <- ts["T09:14/T15:15"]
ts <- to.minutes(ts, OHLC=F)
head(ts)
ts <- ts["T09:15/T15:15"]
head(ts)
ts<-IF1203
ts <- ts["T09:15/T15:15"]
head(ts)
ts[,2:5]
ts<-ts[,2:5]
ts <- to.minutes(ts, OHLC=F)
ts
symbols <- c("IF1011", "IF1012", paste("IF110", 1:9, sep=""), paste("IF120", 1:6, sep=""))
symbols
source('~/workspace/RTradingStrategies/saveData.R')
load("~/workspace/RTradingStrategies/IF1011.rda")
IF1011
head(IF1011)
source('~/workspace/RTradingStrategies/saveData.R')
load("~/workspace/RTradingStrategies/IF1011.rda")
source('~/workspace/RTradingStrategies/saveData.R')
load("~/workspace/RTradingStrategies/IF1104.rda")
load("~/workspace/RTradingStrategies/IF1104.rda")
save
source('~/workspace/RTradingStrategies/saveData.R')
load("~/workspace/RTradingStrategies/IF1104.rda")
load("~/workspace/RTradingStrategies/IF1104.rda")
ts
source('~/workspace/RTradingStrategies/saveData.R')
source('~/workspace/RTradingStrategies/quantstrat-addon.R')
source('~/workspace/RTradingStrategies/saveData.R')
head(IF1104)
source('~/workspace/RTradingStrategies/saveData.R')
head(IF1104)
source('~/workspace/RTradingStrategies/saveData.R')
source('~/workspace/RTradingStrategies/saveData.R')
save("IF1104", file="IF1104.rda")
save("IF1105", file="IF1105.rda")
save("IF1106", file="IF1106.rda")
save("IF1107", file="IF1107.rda")
save("IF1108", file="IF1108.rda")
save("IF1109", file="IF1109.rda")
save("IF1110", file="IF1110.rda")
symbols <- c(paste("IF110", 4:9, sep=""), paste("IF111", 0:2, sep=""), paste("IF120", 1:6, sep=""))
symbols
source('~/.active-rstudio-document')
source('~/workspace/RTradingStrategies/saveData.R')
save("IF1110", file="IF1110.rda")
save("IF1111", file="IF1111.rda")
save("IF1112", file="IF1112.rda")
save("IF1201", file="IF1201.rda")
save("IF1202", file="IF1202.rda")
save("IF1203", file="IF1203.rda")
save("IF1204", file="IF1204.rda")
save("IF1205", file="IF1205.rda")
save("IF1206", file="IF1206.rda")
save("IF1207", file="IF1207.rda")
load("~/workspace/RTradingStrategies/IF1206.rda")
getSymbols("IF1204",src="RData")
library("quantstrat")
library("qmao")
getSymbols("IF1204",src="RData")
source('~/workspace/RTradingStrategies/dma_adx.R')
head(IF1204)
getSymbols("IF1208", src="RData", dir=current.dir,  col.names=c("High","Low","Close","Bid", "Ask", "Volume"))
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
showSymbols()
removeSymbols("IF1208")
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
warnings()
rbind(IF1201, IF1202)
rbind(IF1204, IF1205)
load("~/workspace/RTradingStrategies/IF1205.rda")
rbind(IF1204, IF1205)
